name: main workflow

on:
  push:
    branches:
      - 'main'
  pull_request:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_TOKEN }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: install java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'gradle'

      - name: install node
        uses: actions/setup-node@v3
        with:
          node-version: '14'
          cache: 'yarn'

      - name: Install Cypress Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb

      - name: Grant access to Gradle
        run: chmod +x ./gradlew

      - name: Install Project Dependencies
        run: yarn install --frozen-lockfile

      - name: Cache gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache node modules
        uses: actions/cache@v3
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Lint
        run: yarn nx run-many --target=lint --all --parallel

      - name: Build
        run: yarn nx run-many --target=build --all --parallel

      - name: Run Tests
        run: yarn nx run-many --target=test --all --coverage --coverageReporters=json --parallel

      - name: Run e2e Tests
        run: yarn nx run-many --target=e2e-ci --all --parallel

      - name: Sonar Scan
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./gradlew testReport
          ./gradlew integrationTestReport
          ./gradlew codeCoverageReport
          ./gradlew sonarqube

  build-image:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build-and-test
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build prod
        run: |
          yarn nx build sn-application
          yarn nx build social-network-frontend --prod

      - name: Login to docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Socivio API image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/sn-application
          file: ./apps/sn-application/Dockerfile
          push: true
          tags: wizard2020abc/social-network-backend:0.0.1

      - name: Build and push Socivio UI image
        uses: docker/build-push-action@v4
        with:
          context: ./apps/social-network-frontend
          file: ./apps/social-network-frontend/Dockerfile
          push: true
          tags: wizard2020abc/social-network-frontend:0.0.1

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: [ 'build-and-test', 'build-image' ]
    steps:
      - name: Install helm
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        id: install
      - name: Install helm chart
        run: |
          helm install socivio-api ./deploy/dev/socivio-api/
          helm install socivio-ui ./deploy/dev/socivio-ui/
